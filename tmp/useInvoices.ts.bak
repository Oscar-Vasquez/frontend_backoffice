"use client";

import { useState, useMemo } from "react";
import { PaymentsService } from "@/app/services/payments.service";
import { TransactionsService } from "@/app/services/transactions.service";
import { Invoice, BillingStats, PaymentDialogState, PaymentMethod, InvoiceStatus, ExtendedFirebaseUser } from "../types";
import { customToast } from "@/app/lib/toast";
import { UsersService } from "@/app/services/users.service";

// Nuevo tipo para facturas con informaci√≥n del cliente
export interface PendingInvoiceWithClient {
  invoice: Invoice;
  client: ExtendedFirebaseUser;
  status: 'pending' | 'overdue' | 'paid';
  daysOverdue: number;
}

interface UseInvoicesProps {
  onUpdateUser?: (userId: string) => Promise<void>;
}

interface UseInvoicesResult {
  invoices: Invoice[];
  stats: BillingStats;
  paymentDialog: PaymentDialogState;
  processingPayment: string | null;
  pendingInvoices: PendingInvoiceWithClient[];
  isPartialPayment: boolean;
  partialPaymentAmount: string;
  localAmountReceived: string;
  isInvoicePaid: (invoice: Invoice) => boolean;
  getInvoicesForUser: (userId: string) => Promise<void>;
  getPendingInvoices: () => Promise<void>;
  handleOpenPaymentDialog: (invoice: Invoice) => void;
  handleClosePaymentDialog: () => void;
  setPaymentMethod: (method: PaymentMethod) => void;
  setAmountReceived: (amount: number) => void;
  setIsPartialPayment: (isPartial: boolean) => void;
  setPartialPaymentAmount: (amount: string) => void;
  setLocalAmountReceived: (amount: string) => void;
  handlePaymentSubmit: () => Promise<void>;
  formatCurrency: (amount: number) => string;
  formatDate: (dateString: string) => string;
  getCachedUser: (userId: string) => ExtendedFirebaseUser | null;
  cacheUser: (user: ExtendedFirebaseUser) => void;
}

const DEFAULT_STATS: BillingStats = {
  totalPayments: 0,
  activePackages: 0,
  pendingPayments: 0,
  lastActivity: 'Sin actividad'
};

export function useInvoices({ onUpdateUser }: UseInvoicesProps = {}): UseInvoicesResult {
  const [invoices, setInvoices] = useState<Invoice[]>([]);
  const [pendingInvoices, setPendingInvoices] = useState<PendingInvoiceWithClient[]>([]);
  const [stats, setStats] = useState<BillingStats>(DEFAULT_STATS);
  const [processingPayment, setProcessingPayment] = useState<string | null>(null);
  const [paymentDialog, setPaymentDialog] = useState<PaymentDialogState>({
    open: false,
    invoice: null,
    paymentAmount: 0,
    paymentMethod: '',
    amountReceived: 0
  });
  
  // Estados para pago parcial
  const [isPartialPayment, setIsPartialPayment] = useState<boolean>(false);
  const [partialPaymentAmount, setPartialPaymentAmount] = useState<string>('');
  const [localAmountReceived, setLocalAmountReceived] = useState<string>('');
  
  // Sistema de cach√© de usuarios para evitar consultas repetidas
  const [userCache, setUserCache] = useState<Record<string, ExtendedFirebaseUser>>({});

  // Funci√≥n para verificar si un m√©todo es efectivo
  const isCashMethod = useMemo(() => (method: string): boolean => {
    return method === 'cash' || method === 'efectivo';
  }, []);

  // Funci√≥n para obtener un usuario de la cach√© o null si no existe
  const getCachedUser = (userId: string): ExtendedFirebaseUser | null => {
    return userCache[userId] || null;
  };

  // Funci√≥n para guardar un usuario en la cach√©
  const cacheUser = (user: ExtendedFirebaseUser) => {
    if (user && user.id) {
      console.log('üóÉÔ∏è Guardando usuario en cach√©:', user.id);
      setUserCache(prev => ({
        ...prev,
        [user.id]: user
      }));
    }
  };

  const updateStats = (currentInvoices: Invoice[]) => {
    try {
      // Log para depuraci√≥n
      console.log('üî¢ Calculando estad√≠sticas para', currentInvoices.length, 'facturas');
      
      // Funci√≥n para determinar si una factura est√° pagada con verificaciones completas
      const isPaid = (invoice: Invoice): boolean => {
        return (
          invoice.status === 'paid' || 
          invoice.status === 'PAGADO' || 
          invoice.invoiceStatus === 'PAGADO' ||
          invoice.paid === true || 
          invoice.isPaid === true ||
          (invoice.paymentDate !== undefined && invoice.paymentDate !== null)
        );
      };
      
      // Separar facturas pagadas y pendientes usando el m√©todo de verificaci√≥n m√°s confiable
      const paidInvoices = currentInvoices.filter(inv => isPaid(inv));
      const pendingInvoices = currentInvoices.filter(inv => !isPaid(inv));
      
      // Logging de depuraci√≥n
      console.log('üìä Facturas pagadas:', paidInvoices.length);
      console.log('üìä Facturas pendientes:', pendingInvoices.length);
      
      // Calcular los totales de montos
      const totalPaid = paidInvoices.reduce((sum, inv) => sum + (inv.amount || 0), 0);
      const pendingPayments = pendingInvoices.reduce((sum, inv) => sum + (inv.amount || 0), 0);
      
      // Log de montos
      console.log('üí∞ Total pagado:', totalPaid);
      console.log('üí∞ Total pendiente:', pendingPayments);
      
      // Contar paquetes activos (solo en facturas pendientes)
      const activePackages = pendingInvoices.reduce((sum, inv) => {
        // Asegurarnos que packages siempre sea un array
        const packages = Array.isArray(inv.packages) ? inv.packages : [];
        return sum + packages.length;
      }, 0);
      
      console.log('üì¶ Paquetes activos:', activePackages);
      
      // Obtener la fecha de actividad m√°s reciente de cualquier factura
      let lastActivityDate = new Date(0); // Fecha inicial muy antigua
      
      currentInvoices.forEach(inv => {
        // Verificar todas las posibles propiedades de fecha
        const dateFields = ['createdAt', 'date', 'paymentDate', 'updatedAt'];
        
        dateFields.forEach(field => {
          if (inv[field as keyof Invoice]) {
            const currentDate = new Date(inv[field as keyof Invoice] as string);
            if (currentDate > lastActivityDate) {
              lastActivityDate = currentDate;
            }
          }
        });
      });
      
      const lastActivity = lastActivityDate.getTime() > 0 
        ? formatDate(lastActivityDate.toISOString()) 
        : 'Sin actividad';
      
      console.log('üïí √öltima actividad:', lastActivity);
      
      // Actualizar el estado con las estad√≠sticas calculadas
      setStats({
        totalPayments: totalPaid,
        activePackages: activePackages,
        pendingPayments: pendingPayments,
        lastActivity: lastActivity
      });
    } catch (error) {
      console.error('Error al actualizar estad√≠sticas:', error);
      // En caso de error, mantener las estad√≠sticas anteriores
    }
  };

  const getInvoicesForUser = async (userId: string) => {
    try {
      console.log('üìÑ Obteniendo facturas para usuario:', userId);
      
      // Primero, obtener la informaci√≥n del usuario y guardarla en cach√©
      const userInfo = getCachedUser(userId) || await UsersService.searchUser(userId);
      if (userInfo) {
        cacheUser(userInfo);
      }
      
      // Usar la nueva API con filtros
      const { invoices: userInvoices, pagination } = await PaymentsService.getInvoices(1, 50, {
        userId: userId,
        sort: 'createdAt',
        sortDirection: 'desc'
      });
      
      console.log('üìÑ Facturas obtenidas:', userInvoices, 'Paginaci√≥n:', pagination);

      // Adaptar las facturas al formato esperado por el componente InvoiceList
      const adaptedInvoices = userInvoices.map(invoice => {
        // Verificar que factura tenga los campos necesarios
        console.log('üîÑ Adaptando factura:', invoice);
        
        // Asegurar que la factura tenga el campo 'packages' esperado por InvoiceList
        if (!invoice.packages) {
          invoice.packages = invoice.items || [];
        }
        
        // Si los packages no son un array o no existe, inicializar como array vac√≠o
        if (!Array.isArray(invoice.packages)) {
          invoice.packages = [];
          console.warn('‚ö†Ô∏è La factura no tiene packages o no es un array:', invoice.id);
        }
        
        // Asegurar que cada package tenga un ID y trackingNumber
        invoice.packages = invoice.packages.map((pkg, index) => ({
          packageId: pkg.packageId || pkg.id || `pkg-${index}`,
          trackingNumber: pkg.trackingNumber || pkg.tracking || `TN-${index}`,
          status: pkg.status || 'pending',
          weight: pkg.weight || 0,
          volumetricWeight: pkg.volumetricWeight || 0,
          dimensions: pkg.dimensions || { length: 0, width: 0, height: 0 },
          insurance: pkg.insurance || false,
          shippingStages: pkg.shippingStages || [],
          position: pkg.position || 'N/A'
        }));
        
        // Asegurar campos obligatorios y a√±adir informaci√≥n del cliente
        return {
          ...invoice,
          id: invoice.id,
          userId: invoice.userId,
          amount: invoice.amount || 0,
          status: invoice.status || 'due',
          isPaid: invoice.paid || invoice.status === 'paid',
          date: invoice.createdAt || invoice.date || new Date().toISOString(),
          description: invoice.description || 'Factura de servicio',
          totalPackages: invoice.packages.length,
          packages: invoice.packages,
          paid: invoice.paid || invoice.status === 'paid',
          // A√±adir cliente si existe en la cach√©
          client: userInfo,
          // Compatibilidad hacia atr√°s
          invoiceStatus: invoice.status === 'paid' ? 'PAGADO' : 'PENDIENTE'
        };
      });
      
      setInvoices(adaptedInvoices);
      updateStats(adaptedInvoices);
      
      if (adaptedInvoices.length === 0) {
        customToast.info({
          title: "Sin Facturas",
          description: "No hay facturas para este usuario"
        });
      }
      
      return adaptedInvoices;
    } catch (error) {
      console.error('‚ùå Error al obtener facturas:', error);
      customToast.warning({
        title: "Facturas No Disponibles",
        description: "No se pudieron cargar las facturas del usuario"
      });
      setInvoices([]);
      throw error;
    }
  };

  // Nueva funci√≥n para obtener facturas pendientes que utiliza la cach√©
  const getPendingInvoices = async () => {
    try {
      console.log('üìÑ Obteniendo facturas pendientes de todos los clientes');
      const { pendingInvoices: invoicesWithClients } = await PaymentsService.getPendingInvoices();
      console.log('üìÑ Facturas pendientes obtenidas:', invoicesWithClients);
      
      // Guardar usuarios en cach√© mientras procesamos
      invoicesWithClients.forEach(item => {
        if (item.client && item.client.id) {
          cacheUser(item.client);
        }
      });
      
      // Procesar cada factura para determinar si est√° atrasada y calcular d√≠as de vencimiento
      const processedInvoices: PendingInvoiceWithClient[] = invoicesWithClients.map(item => {
        const dueDate = new Date(item.invoice.dueDate || item.invoice.createdAt);
        const today = new Date();
        
        // Resetear las horas para comparar solo fechas
        dueDate.setHours(0, 0, 0, 0);
        today.setHours(0, 0, 0, 0);
        
        const diffTime = Math.abs(today.getTime() - dueDate.getTime());
        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
        
        // Verificar si la factura est√° vencida
        const isOverdue = dueDate < today && !item.invoice.paid;
        
        return {
          ...item,
          status: item.invoice.paid ? 'paid' : (isOverdue ? 'overdue' : 'pending'),
          daysOverdue: isOverdue ? diffDays : 0
        };
      });
      
      setPendingInvoices(processedInvoices);
      
      if (processedInvoices.length === 0) {
        customToast.info({
          title: "Sin Facturas Pendientes",
          description: "No hay facturas pendientes o atrasadas en el sistema"
        });
      } else {
        customToast.success({
          title: "Facturas Pendientes",
          description: `Se encontraron ${processedInvoices.length} facturas pendientes`
        });
      }
      
      return processedInvoices;
    } catch (error) {
      console.error('‚ùå Error al obtener facturas pendientes:', error);
      customToast.warning({
        title: "Facturas No Disponibles",
        description: "No se pudieron cargar las facturas pendientes del sistema"
      });
      setPendingInvoices([]);
      throw error;
    }
  };

  // Funci√≥n unificada para determinar si una factura est√° pagada
  const isInvoicePaidInternal = (invoice: Invoice): boolean => {
    return (
      invoice.status === 'paid' || 
      invoice.status === 'PAGADO' || 
      invoice.invoiceStatus === 'PAGADO' ||
      invoice.paid === true || 
      invoice.isPaid === true ||
      (invoice.paymentDate !== undefined && invoice.paymentDate !== null)
    );
  };

  const getInvoiceStatus = (invoice: Invoice): InvoiceStatus => {
    return isInvoicePaidInternal(invoice) ? 'PAGADO' : 'PENDIENTE';
  };

  const isInvoicePaid = (invoice: Invoice): boolean => {
    return isInvoicePaidInternal(invoice);
  };

  const handleOpenPaymentDialog = (invoice: Invoice) => {
    console.log('[useInvoices] Abriendo di√°logo de pago para factura:', invoice.id);
    
    // Obtener informaci√≥n del cliente si no est√° presente
    let invoiceWithClient = { ...invoice };
    
    if (invoice.userId && !invoice.client) {
      const cachedClient = getCachedUser(invoice.userId);
      if (cachedClient) {
        console.log('[useInvoices] Utilizando cliente de cach√©:', cachedClient.id);
        invoiceWithClient.client = cachedClient;
      }
    }
    
    // Restablecer todos los valores del di√°logo al abrir
    setPaymentDialog({
      open: true,
      invoice: invoiceWithClient,
      paymentAmount: invoice.amount,
      paymentMethod: 'cash', // Predeterminado a efectivo
      amountReceived: invoice.amount // Inicializamos con el monto a pagar
    });
    
    // Restablecer estados de pago parcial
    setIsPartialPayment(false);
    setPartialPaymentAmount(invoice.amount.toString());
    setLocalAmountReceived(invoice.amount.toString());
  };

  const handleClosePaymentDialog = () => {
    setPaymentDialog(prev => ({ ...prev, open: false }));
    // Restablecer estados de pago parcial
    setIsPartialPayment(false);
    setPartialPaymentAmount('');
    setLocalAmountReceived('');
  };

  const setPaymentMethod = (method: PaymentMethod) => {
    console.log(`[useInvoices] Cambiando m√©todo de pago a: ${method}`);
    
    setPaymentDialog(prev => {
      // Crear el nuevo estado
      const newState = { 
        ...prev, 
        paymentMethod: method,
      };
      
      // Verificar si es m√©todo efectivo
      if (isCashMethod(method)) {
        console.log(`[useInvoices] M√©todo efectivo seleccionado, inicializando monto recibido a: ${prev.paymentAmount}`);
        newState.amountReceived = prev.paymentAmount;
        
        // Actualizar tambi√©n el estado local
        const targetAmount = isPartialPayment && partialPaymentAmount 
          ? parseFloat(partialPaymentAmount) 
          : prev.paymentAmount;
          
        setLocalAmountReceived(targetAmount.toString());
      } else {
        // Para otros m√©todos, no necesitamos el amountReceived pero mantenemos el valor
        newState.amountReceived = prev.paymentAmount;
      }
      
      return newState;
    });
  };

  const setAmountReceived = (amount: number) => {
    setPaymentDialog(prev => ({ 
      ...prev, 
      amountReceived: amount
    }));
  };

  const handlePaymentSubmit = async () => {
    console.log('üîÑ Iniciando env√≠o de pago...');
    if (!paymentDialog.invoice) return;

    setProcessingPayment(paymentDialog.invoice.id);
    
    try {
      // Verificar si la factura ya est√° pagada
      if (isInvoicePaid(paymentDialog.invoice)) {
        throw new Error('Esta factura ya ha sido pagada anteriormente');
      }

      // ID fijo para el m√©todo de pago
      const FIXED_PAYMENT_METHOD_ID = '3e7a40e3-307d-4846-8f65-f4f1668bbfb3';

      console.log('üí∞ Procesando pago:', {
        invoiceId: paymentDialog.invoice.id,
        amount: isPartialPayment ? parseFloat(partialPaymentAmount) : paymentDialog.paymentAmount,
        method: paymentDialog.paymentMethod,
        amountReceived: parseFloat(localAmountReceived),
        paymentMethodId: FIXED_PAYMENT_METHOD_ID
      });

      // Determinar el monto a pagar (total o parcial)
      const paymentAmount = isPartialPayment 
        ? parseFloat(partialPaymentAmount) 
        : paymentDialog.paymentAmount;

      // Procesar el pago a trav√©s del servicio
      const result = await PaymentsService.processPayment(
        paymentDialog.invoice.id, 
        paymentAmount,
        {
          method: paymentDialog.paymentMethod,
          amountReceived: parseFloat(localAmountReceived),
          paymentMethodId: FIXED_PAYMENT_METHOD_ID
        }
      );
      
      if (result) {
        console.log('‚úÖ Pago procesado con √©xito:', result);
        
        // Actualizar la factura en el estado local inmediatamente
        const updatedInvoice: Invoice = {
          ...paymentDialog.invoice,
          status: isPartialPayment ? 'due' : 'paid',
          paid: !isPartialPayment, // Solo se marca como pagada si no es parcial
          paymentDate: new Date().toISOString(),
          transactionId: result.transactionId || 'tx-' + Date.now()
        };

        setInvoices(prevInvoices => 
          prevInvoices.map(invoice => 
            invoice.id === updatedInvoice.id ? updatedInvoice : invoice
          )
        );
        
        // Actualizar facturas pendientes (quitar solo si es pago total)
        if (!isPartialPayment) {
          setPendingInvoices(prev => 
            prev.filter(item => item.invoice.id !== updatedInvoice.id)
          );
        } else {
          // Si es parcial, actualizar el monto pendiente
          setPendingInvoices(prev => 
            prev.map(item => 
              item.invoice.id === updatedInvoice.id 
                ? {
                    ...item,
                    invoice: {
                      ...item.invoice,
                      amount: item.invoice.amount - paymentAmount // Reducir el monto pendiente
                    }
                  }
                : item
            )
          );
        }
        
        // Intentar obtener las transacciones asociadas para mostrar informaci√≥n adicional
        try {
          const transactions = await TransactionsService.getTransactionsByEntity(
            'invoice', 
            paymentDialog.invoice.id
          );
          
          if (transactions && transactions.length > 0) {
            console.log('üîç Transacciones asociadas:', transactions);
            
            // Aqu√≠ podr√≠as mostrar informaci√≥n adicional sobre la transacci√≥n
            // o almacenarla en el estado para su uso posterior
          }
        } catch (txError) {
          console.warn('‚ö†Ô∏è No se pudieron obtener las transacciones:', txError);
          // No interrumpir el flujo principal si hay un error aqu√≠
        }
        
        // Calcular cambio (solo relevante si es efectivo)
        const isCash = paymentDialog.paymentMethod === 'cash' || 
                      paymentDialog.paymentMethod === 'efectivo';
                      
        const change = isCash ? parseFloat(localAmountReceived) - paymentAmount : 0;
        
        // Mostrar mensaje de √©xito
        customToast.success({
          title: isPartialPayment ? '¬°Pago Parcial Procesado!' : '¬°Pago Procesado!',
          description: `Pago de ${formatCurrency(paymentAmount)} procesado correctamente.${
            change > 0 ? ` Cambio: ${formatCurrency(change)}` : ''
          }${
            isPartialPayment ? ` Pendiente: ${formatCurrency(paymentDialog.paymentAmount - paymentAmount)}` : ''
          }`
        });

        // Refrescar lista de facturas si es necesario
        if (paymentDialog.invoice.userId && onUpdateUser) {
          await onUpdateUser(paymentDialog.invoice.userId);
        }

        // Actualizar lista de facturas pendientes
        await getPendingInvoices();

        handleClosePaymentDialog();
      }
    } catch (error) {
      console.error('‚ùå Error al procesar pago:', error);
      customToast.error({
        title: 'Error al Procesar Pago',
        description: error instanceof Error ? error.message : 'No se pudo procesar el pago'
      });
    } finally {
      setProcessingPayment(null);
    }
  };

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('es-MX', {
      style: 'currency',
      currency: 'MXN'
    }).format(amount);
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('es-ES', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
  };

  return {
    invoices,
    stats,
    paymentDialog,
    processingPayment,
    pendingInvoices,
    isPartialPayment,
    partialPaymentAmount,
    localAmountReceived,
    isInvoicePaid,
    getInvoicesForUser,
    getPendingInvoices,
    handleOpenPaymentDialog,
    handleClosePaymentDialog,
    setPaymentMethod,
    setAmountReceived,
    setIsPartialPayment,
    setPartialPaymentAmount,
    setLocalAmountReceived,
    handlePaymentSubmit,
    formatCurrency,
    formatDate,
    getCachedUser,
    cacheUser
  };
} 